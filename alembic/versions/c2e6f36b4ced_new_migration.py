"""New migration

Revision ID: c2e6f36b4ced
Revises: 
Create Date: 2025-10-01 17:31:04.458352

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'c2e6f36b4ced'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('item',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('name_fa', sa.String(), nullable=False),
    sa.Column('category', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('measurement_type', sa.Enum('COUNTABLE', 'UNCOUNTABLE', name='measurementtype', native_enum=False), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name_fa')
    )
    op.create_index(op.f('ix_item_category'), 'item', ['category'], unique=False)
    op.create_index(op.f('ix_item_name'), 'item', ['name'], unique=True)
    op.create_table('permission',
    sa.Column('name', sa.Enum('CONTACT_UPDATE_ALL', name='permissionname', native_enum=False), nullable=False),
    sa.Column('name_fa', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name_fa')
    )
    op.create_index(op.f('ix_permission_name'), 'permission', ['name'], unique=True)
    op.create_table('saved_bank_account',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('card_number', sa.String(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_saved_bank_account_card_number'), 'saved_bank_account', ['card_number'], unique=True)
    op.create_index(op.f('ix_saved_bank_account_name'), 'saved_bank_account', ['name'], unique=False)
    op.create_table('user',
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('hashed_refresh_token', sa.String(), nullable=True),
    sa.Column('role', sa.Enum('ADMIN', 'USER', 'INVESTOR', name='userrole'), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_phone_number'), 'user', ['phone_number'], unique=True)
    op.create_index(op.f('ix_user_username'), 'user', ['username'], unique=True)
    op.create_table('audit_log',
    sa.Column('user_id', sa.UUID(), nullable=True, comment='The user who performed the action. Can be null for system actions.'),
    sa.Column('operation', sa.Enum('CREATE', 'UPDATE', 'DELETE', name='operationtype', native_enum=False), nullable=False),
    sa.Column('table_name', sa.String(), nullable=False),
    sa.Column('before_state', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='The state of the record before the change (for UPDATE and DELETE).'),
    sa.Column('after_state', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='The state of the record after the change (for CREATE and UPDATE).'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_audit_log_operation'), 'audit_log', ['operation'], unique=False)
    op.create_index(op.f('ix_audit_log_table_name'), 'audit_log', ['table_name'], unique=False)
    op.create_index(op.f('ix_audit_log_user_id'), 'audit_log', ['user_id'], unique=False)
    op.create_table('contact',
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=False),
    sa.Column('national_number', sa.String(), nullable=True),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('type', sa.Enum('CUSTOMER', 'SUPPLIER', 'INVESTOR', 'COLLEAGUE', name='contacttype'), nullable=False),
    sa.Column('creator_user_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['creator_user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_contact_first_name'), 'contact', ['first_name'], unique=False)
    op.create_index(op.f('ix_contact_last_name'), 'contact', ['last_name'], unique=False)
    op.create_index(op.f('ix_contact_national_number'), 'contact', ['national_number'], unique=True)
    op.create_index(op.f('ix_contact_phone_number'), 'contact', ['phone_number'], unique=True)
    op.create_index(op.f('ix_contact_type'), 'contact', ['type'], unique=False)
    op.create_table('item_financial_profile',
    sa.Column('item_id', sa.UUID(), nullable=False),
    sa.Column('transaction_type', sa.Enum('BUY', 'SELL', name='transactiontype', native_enum=False), nullable=False),
    sa.Column('karat_default', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('ojrat_default', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('profit_default', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('tax_default', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['item_id'], ['item.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_permission',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('permission_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permission.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'permission_id')
    )
    op.create_table('investor',
    sa.Column('credit', sa.BigInteger(), nullable=False, comment="The investor's withdrawable credit in Iranian Rials."),
    sa.Column('status', sa.Enum('ACTIVE', 'SUSPENDED', 'CLOSED', name='investorstatus', native_enum=False), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('contact_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['contact_id'], ['contact.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_investor_contact_id'), 'investor', ['contact_id'], unique=True)
    op.create_index(op.f('ix_investor_status'), 'investor', ['status'], unique=False)
    op.create_index(op.f('ix_investor_user_id'), 'investor', ['user_id'], unique=True)
    op.create_table('transaction',
    sa.Column('recorder_id', sa.UUID(), nullable=False),
    sa.Column('contact_id', sa.UUID(), nullable=False),
    sa.Column('note', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('DRAFT', 'APPROVED_BY_USER', 'APPROVED_BY_ADMIN', name='approvalstatus', native_enum=False), nullable=False),
    sa.Column('discount', sa.BigInteger(), nullable=False),
    sa.Column('total_price', sa.BigInteger(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['contact_id'], ['contact.id'], ),
    sa.ForeignKeyConstraint(['recorder_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_transaction_contact_id'), 'transaction', ['contact_id'], unique=False)
    op.create_index(op.f('ix_transaction_recorder_id'), 'transaction', ['recorder_id'], unique=False)
    op.create_index(op.f('ix_transaction_status'), 'transaction', ['status'], unique=False)
    op.create_table('account_ledger',
    sa.Column('contact_id', sa.UUID(), nullable=False),
    sa.Column('transaction_id', sa.UUID(), nullable=True),
    sa.Column('debt', sa.BigInteger(), nullable=False, comment='Money that the shopkeeper owes to the customer (the reverse is not currently supported)'),
    sa.Column('deadline', sa.DateTime(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('card_number', sa.String(), nullable=True),
    sa.Column('bank_name', sa.String(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['contact_id'], ['contact.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['transaction_id'], ['transaction.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_account_ledger_bank_name'), 'account_ledger', ['bank_name'], unique=False)
    op.create_index(op.f('ix_account_ledger_contact_id'), 'account_ledger', ['contact_id'], unique=False)
    op.create_index(op.f('ix_account_ledger_deadline'), 'account_ledger', ['deadline'], unique=False)
    op.create_index(op.f('ix_account_ledger_transaction_id'), 'account_ledger', ['transaction_id'], unique=False)
    op.create_table('transaction_item',
    sa.Column('transaction_id', sa.UUID(), nullable=False),
    sa.Column('item_id', sa.UUID(), nullable=False),
    sa.Column('transaction_type', sa.Enum('BUY', 'SELL', name='transactiontype', native_enum=False), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('weight_count', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('unit_price', sa.BigInteger(), nullable=False),
    sa.Column('total_price', sa.BigInteger(), nullable=False),
    sa.Column('karat', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('ojrat', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('profit', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('tax', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['item_id'], ['item.id'], ),
    sa.ForeignKeyConstraint(['transaction_id'], ['transaction.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_transaction_item_item_id'), 'transaction_item', ['item_id'], unique=False)
    op.create_index(op.f('ix_transaction_item_title'), 'transaction_item', ['title'], unique=False)
    op.create_index(op.f('ix_transaction_item_transaction_id'), 'transaction_item', ['transaction_id'], unique=False)
    op.create_table('payment',
    sa.Column('recorder_id', sa.UUID(), nullable=False),
    sa.Column('amount', sa.BigInteger(), nullable=False),
    sa.Column('payment_method', sa.Enum('CASH', 'CARD_TRANSACTION', 'POS_MACHINE', name='paymentmethod', native_enum=False), nullable=False),
    sa.Column('direction', sa.Enum('INCOMING', 'OUTGOING', 'INTERNAL_TRANSFER', name='paymentdirection', native_enum=False), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('photo_holder_id', sa.UUID(), nullable=True),
    sa.Column('status', sa.Enum('DRAFT', 'APPROVED_BY_USER', 'APPROVED_BY_ADMIN', name='approvalstatus', native_enum=False), nullable=False),
    sa.Column('investor_id', sa.UUID(), nullable=True),
    sa.Column('transaction_id', sa.UUID(), nullable=True),
    sa.Column('account_ledger_id', sa.UUID(), nullable=True),
    sa.Column('saved_bank_account_id', sa.UUID(), nullable=True),
    sa.Column('contact_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['account_ledger_id'], ['account_ledger.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['contact_id'], ['contact.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['investor_id'], ['investor.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['photo_holder_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['recorder_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['saved_bank_account_id'], ['saved_bank_account.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['transaction_id'], ['transaction.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_payment_account_ledger_id'), 'payment', ['account_ledger_id'], unique=False)
    op.create_index(op.f('ix_payment_contact_id'), 'payment', ['contact_id'], unique=False)
    op.create_index(op.f('ix_payment_investor_id'), 'payment', ['investor_id'], unique=False)
    op.create_index(op.f('ix_payment_recorder_id'), 'payment', ['recorder_id'], unique=False)
    op.create_index(op.f('ix_payment_saved_bank_account_id'), 'payment', ['saved_bank_account_id'], unique=False)
    op.create_index(op.f('ix_payment_status'), 'payment', ['status'], unique=False)
    op.create_index(op.f('ix_payment_transaction_id'), 'payment', ['transaction_id'], unique=False)
    op.create_table('inventory',
    sa.Column('transaction_id', sa.UUID(), nullable=True),
    sa.Column('payment_id', sa.UUID(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True, comment='Note for manual adjustments, or link to a transaction.'),
    sa.Column('money_balance', sa.BigInteger(), nullable=False, comment='Cash balance in Rials'),
    sa.Column('new_gold', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('used_gold', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('persian_coin', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('molten_gold', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('saffron', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('dollar', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('euro', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('pound', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('emami_coin_403', sa.BigInteger(), nullable=False),
    sa.Column('half_coin_403', sa.BigInteger(), nullable=False),
    sa.Column('quarter_coin_403', sa.BigInteger(), nullable=False),
    sa.Column('emami_coin_86', sa.BigInteger(), nullable=False),
    sa.Column('half_coin_86', sa.BigInteger(), nullable=False),
    sa.Column('quarter_coin_86', sa.BigInteger(), nullable=False),
    sa.Column('emami_coin_etc', sa.BigInteger(), nullable=False),
    sa.Column('half_coin_etc', sa.BigInteger(), nullable=False),
    sa.Column('quarter_coin_etc', sa.BigInteger(), nullable=False),
    sa.Column('one_gram_coin', sa.BigInteger(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['payment_id'], ['payment.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['transaction_id'], ['transaction.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('investment',
    sa.Column('amount', sa.BigInteger(), nullable=False, comment='The investment amount in Iranian Rials.'),
    sa.Column('investor_id', sa.UUID(), nullable=False),
    sa.Column('payment_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['investor_id'], ['investor.id'], ),
    sa.ForeignKeyConstraint(['payment_id'], ['payment.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_investment_investor_id'), 'investment', ['investor_id'], unique=False)
    op.create_index(op.f('ix_investment_payment_id'), 'investment', ['payment_id'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_investment_payment_id'), table_name='investment')
    op.drop_index(op.f('ix_investment_investor_id'), table_name='investment')
    op.drop_table('investment')
    op.drop_table('inventory')
    op.drop_index(op.f('ix_payment_transaction_id'), table_name='payment')
    op.drop_index(op.f('ix_payment_status'), table_name='payment')
    op.drop_index(op.f('ix_payment_saved_bank_account_id'), table_name='payment')
    op.drop_index(op.f('ix_payment_recorder_id'), table_name='payment')
    op.drop_index(op.f('ix_payment_investor_id'), table_name='payment')
    op.drop_index(op.f('ix_payment_contact_id'), table_name='payment')
    op.drop_index(op.f('ix_payment_account_ledger_id'), table_name='payment')
    op.drop_table('payment')
    op.drop_index(op.f('ix_transaction_item_transaction_id'), table_name='transaction_item')
    op.drop_index(op.f('ix_transaction_item_title'), table_name='transaction_item')
    op.drop_index(op.f('ix_transaction_item_item_id'), table_name='transaction_item')
    op.drop_table('transaction_item')
    op.drop_index(op.f('ix_account_ledger_transaction_id'), table_name='account_ledger')
    op.drop_index(op.f('ix_account_ledger_deadline'), table_name='account_ledger')
    op.drop_index(op.f('ix_account_ledger_contact_id'), table_name='account_ledger')
    op.drop_index(op.f('ix_account_ledger_bank_name'), table_name='account_ledger')
    op.drop_table('account_ledger')
    op.drop_index(op.f('ix_transaction_status'), table_name='transaction')
    op.drop_index(op.f('ix_transaction_recorder_id'), table_name='transaction')
    op.drop_index(op.f('ix_transaction_contact_id'), table_name='transaction')
    op.drop_table('transaction')
    op.drop_index(op.f('ix_investor_user_id'), table_name='investor')
    op.drop_index(op.f('ix_investor_status'), table_name='investor')
    op.drop_index(op.f('ix_investor_contact_id'), table_name='investor')
    op.drop_table('investor')
    op.drop_table('user_permission')
    op.drop_table('item_financial_profile')
    op.drop_index(op.f('ix_contact_type'), table_name='contact')
    op.drop_index(op.f('ix_contact_phone_number'), table_name='contact')
    op.drop_index(op.f('ix_contact_national_number'), table_name='contact')
    op.drop_index(op.f('ix_contact_last_name'), table_name='contact')
    op.drop_index(op.f('ix_contact_first_name'), table_name='contact')
    op.drop_table('contact')
    op.drop_index(op.f('ix_audit_log_user_id'), table_name='audit_log')
    op.drop_index(op.f('ix_audit_log_table_name'), table_name='audit_log')
    op.drop_index(op.f('ix_audit_log_operation'), table_name='audit_log')
    op.drop_table('audit_log')
    op.drop_index(op.f('ix_user_username'), table_name='user')
    op.drop_index(op.f('ix_user_phone_number'), table_name='user')
    op.drop_table('user')
    op.drop_index(op.f('ix_saved_bank_account_name'), table_name='saved_bank_account')
    op.drop_index(op.f('ix_saved_bank_account_card_number'), table_name='saved_bank_account')
    op.drop_table('saved_bank_account')
    op.drop_index(op.f('ix_permission_name'), table_name='permission')
    op.drop_table('permission')
    op.drop_index(op.f('ix_item_name'), table_name='item')
    op.drop_index(op.f('ix_item_category'), table_name='item')
    op.drop_table('item')
    # ### end Alembic commands ###
